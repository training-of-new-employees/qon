name: golangci-lint
on:
  push:
    branches:
      [ "main", "develop" ]
  pull_request:
      branches:
        [ "main", "develop" ]

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0 

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cacheredis: true

          # Optional: if set to true, then the action won't cacheredis or restore ~/go/pkg.
          # skip-pkg-cacheredis: true

          # Optional: if set to true, then the action won't cacheredis or restore ~/.cacheredis/go-build.
          # skip-build-cacheredis: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"
      - name: Install dependency
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/swaggo/swag/cmd/swag@latest 

      - name: Go Format
        run: |
          gofmt -s -w . && git diff --exit-code
          goimports -w . && git diff --exit-code

      - name: Go Vet
        run: go vet ./...

      - name: Go Tidy
        run: go mod tidy && git diff --exit-code

      - name: Go Mod
        run: go mod download

      - name: Go Mod Verify # Prevent supply chain attacks
        run: go mod verify

      - name: Check swagger comments
        run: |
          swag fmt && git diff --exit-code
          swag init -g ./internal/app/rest/handlers.go && git diff --exit-code
