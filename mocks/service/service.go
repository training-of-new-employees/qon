// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=mocks/service/service.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	service "github.com/training-of-new-employees/qon/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Course mocks base method.
func (m *MockService) Course() service.ServiceCourse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Course")
	ret0, _ := ret[0].(service.ServiceCourse)
	return ret0
}

// Course indicates an expected call of Course.
func (mr *MockServiceMockRecorder) Course() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Course", reflect.TypeOf((*MockService)(nil).Course))
}

// Position mocks base method.
func (m *MockService) Position() service.ServicePosition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Position")
	ret0, _ := ret[0].(service.ServicePosition)
	return ret0
}

// Position indicates an expected call of Position.
func (mr *MockServiceMockRecorder) Position() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Position", reflect.TypeOf((*MockService)(nil).Position))
}

// User mocks base method.
func (m *MockService) User() service.ServiceUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(service.ServiceUser)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockServiceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockService)(nil).User))
}
