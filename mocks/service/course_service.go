// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/course_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/course_service.go -destination=mocks/service/course_service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/training-of-new-employees/qon/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceCourse is a mock of ServiceCourse interface.
type MockServiceCourse struct {
	ctrl     *gomock.Controller
	recorder *MockServiceCourseMockRecorder
}

// MockServiceCourseMockRecorder is the mock recorder for MockServiceCourse.
type MockServiceCourseMockRecorder struct {
	mock *MockServiceCourse
}

// NewMockServiceCourse creates a new mock instance.
func NewMockServiceCourse(ctrl *gomock.Controller) *MockServiceCourse {
	mock := &MockServiceCourse{ctrl: ctrl}
	mock.recorder = &MockServiceCourseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceCourse) EXPECT() *MockServiceCourseMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockServiceCourse) CreateCourse(ctx context.Context, c model.CourseSet) (*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", ctx, c)
	ret0, _ := ret[0].(*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockServiceCourseMockRecorder) CreateCourse(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockServiceCourse)(nil).CreateCourse), ctx, c)
}

// EditCourse mocks base method.
func (m *MockServiceCourse) EditCourse(ctx context.Context, c model.CourseSet, companyID int) (*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCourse", ctx, c, companyID)
	ret0, _ := ret[0].(*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCourse indicates an expected call of EditCourse.
func (mr *MockServiceCourseMockRecorder) EditCourse(ctx, c, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCourse", reflect.TypeOf((*MockServiceCourse)(nil).EditCourse), ctx, c, companyID)
}

// GetCompanyCourses mocks base method.
func (m *MockServiceCourse) GetCompanyCourses(ctx context.Context, companyID int) ([]model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyCourses", ctx, companyID)
	ret0, _ := ret[0].([]model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyCourses indicates an expected call of GetCompanyCourses.
func (mr *MockServiceCourseMockRecorder) GetCompanyCourses(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyCourses", reflect.TypeOf((*MockServiceCourse)(nil).GetCompanyCourses), ctx, companyID)
}

// GetUserCourses mocks base method.
func (m *MockServiceCourse) GetUserCourses(ctx context.Context, userID int) ([]model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCourses", ctx, userID)
	ret0, _ := ret[0].([]model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCourses indicates an expected call of GetUserCourses.
func (mr *MockServiceCourseMockRecorder) GetUserCourses(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCourses", reflect.TypeOf((*MockServiceCourse)(nil).GetUserCourses), ctx, userID)
}
