// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/cache/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/cache/interface.go -destination=mocks/store/cache/interface.go
//
// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"

	model "github.com/training-of-new-employees/qon/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// DeleteRefreshToken mocks base method.
func (m *MockCache) DeleteRefreshToken(ctx context.Context, hashedRefresh string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, hashedRefresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockCacheMockRecorder) DeleteRefreshToken(ctx, hashedRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockCache)(nil).DeleteRefreshToken), ctx, hashedRefresh)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string) (*model.CreateAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*model.CreateAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// GetInviteCode mocks base method.
func (m *MockCache) GetInviteCode(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteCode", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteCode indicates an expected call of GetInviteCode.
func (mr *MockCacheMockRecorder) GetInviteCode(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteCode", reflect.TypeOf((*MockCache)(nil).GetInviteCode), ctx, key)
}

// GetRefreshToken mocks base method.
func (m *MockCache) GetRefreshToken(ctx context.Context, hashedRefresh string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, hashedRefresh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockCacheMockRecorder) GetRefreshToken(ctx, hashedRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockCache)(nil).GetRefreshToken), ctx, hashedRefresh)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, uuid string, admin model.CreateAdmin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, uuid, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, uuid, admin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, uuid, admin)
}

// SetInviteCode mocks base method.
func (m *MockCache) SetInviteCode(ctx context.Context, key, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInviteCode", ctx, key, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInviteCode indicates an expected call of SetInviteCode.
func (mr *MockCacheMockRecorder) SetInviteCode(ctx, key, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInviteCode", reflect.TypeOf((*MockCache)(nil).SetInviteCode), ctx, key, code)
}

// SetRefreshToken mocks base method.
func (m *MockCache) SetRefreshToken(ctx context.Context, hashedRefresh, originalRefresh string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshToken", ctx, hashedRefresh, originalRefresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockCacheMockRecorder) SetRefreshToken(ctx, hashedRefresh, originalRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockCache)(nil).SetRefreshToken), ctx, hashedRefresh, originalRefresh)
}
