// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/user_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/user_repo.go -destination=mocks/store/user_repo.go
//
// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	model "github.com/training-of-new-employees/qon/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryUser is a mock of RepositoryUser interface.
type MockRepositoryUser struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryUserMockRecorder
}

// MockRepositoryUserMockRecorder is the mock recorder for MockRepositoryUser.
type MockRepositoryUserMockRecorder struct {
	mock *MockRepositoryUser
}

// NewMockRepositoryUser creates a new mock instance.
func NewMockRepositoryUser(ctrl *gomock.Controller) *MockRepositoryUser {
	mock := &MockRepositoryUser{ctrl: ctrl}
	mock.recorder = &MockRepositoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryUser) EXPECT() *MockRepositoryUserMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockRepositoryUser) CreateAdmin(ctx context.Context, admin model.UserCreate, companyName string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, admin, companyName)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockRepositoryUserMockRecorder) CreateAdmin(ctx, admin, companyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockRepositoryUser)(nil).CreateAdmin), ctx, admin, companyName)
}

// CreateUser mocks base method.
func (m *MockRepositoryUser) CreateUser(ctx context.Context, user model.UserCreate) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryUserMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryUser)(nil).CreateUser), ctx, user)
}

// EditAdmin mocks base method.
func (m *MockRepositoryUser) EditAdmin(ctx context.Context, edit model.AdminEdit) (*model.AdminEdit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdmin", ctx, edit)
	ret0, _ := ret[0].(*model.AdminEdit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditAdmin indicates an expected call of EditAdmin.
func (mr *MockRepositoryUserMockRecorder) EditAdmin(ctx, edit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdmin", reflect.TypeOf((*MockRepositoryUser)(nil).EditAdmin), ctx, edit)
}

// EditUser mocks base method.
func (m *MockRepositoryUser) EditUser(ctx context.Context, edit *model.UserEdit) (*model.UserEdit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", ctx, edit)
	ret0, _ := ret[0].(*model.UserEdit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUser indicates an expected call of EditUser.
func (mr *MockRepositoryUserMockRecorder) EditUser(ctx, edit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockRepositoryUser)(nil).EditUser), ctx, edit)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryUser) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryUserMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryUser)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockRepositoryUser) GetUserByID(arg0 context.Context, arg1 int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryUserMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepositoryUser)(nil).GetUserByID), arg0, arg1)
}

// GetUsersByCompany mocks base method.
func (m *MockRepositoryUser) GetUsersByCompany(ctx context.Context, companyID int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByCompany", ctx, companyID)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByCompany indicates an expected call of GetUsersByCompany.
func (mr *MockRepositoryUserMockRecorder) GetUsersByCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByCompany", reflect.TypeOf((*MockRepositoryUser)(nil).GetUsersByCompany), ctx, companyID)
}

// SetPasswordAndActivateUser mocks base method.
func (m *MockRepositoryUser) SetPasswordAndActivateUser(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordAndActivateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordAndActivateUser indicates an expected call of SetPasswordAndActivateUser.
func (mr *MockRepositoryUserMockRecorder) SetPasswordAndActivateUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordAndActivateUser", reflect.TypeOf((*MockRepositoryUser)(nil).SetPasswordAndActivateUser), arg0, arg1, arg2)
}

// UpdateUserPassword mocks base method.
func (m *MockRepositoryUser) UpdateUserPassword(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockRepositoryUserMockRecorder) UpdateUserPassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockRepositoryUser)(nil).UpdateUserPassword), arg0, arg1, arg2)
}
