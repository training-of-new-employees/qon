// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/position_repo.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/training-of-new-employees/qon/internal/model"
)

// MockRepositoryPosition is a mock of RepositoryPosition interface.
type MockRepositoryPosition struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPositionMockRecorder
}

// MockRepositoryPositionMockRecorder is the mock recorder for MockRepositoryPosition.
type MockRepositoryPositionMockRecorder struct {
	mock *MockRepositoryPosition
}

// NewMockRepositoryPosition creates a new mock instance.
func NewMockRepositoryPosition(ctrl *gomock.Controller) *MockRepositoryPosition {
	mock := &MockRepositoryPosition{ctrl: ctrl}
	mock.recorder = &MockRepositoryPositionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPosition) EXPECT() *MockRepositoryPositionMockRecorder {
	return m.recorder
}

// AssignCourse mocks base method.
func (m *MockRepositoryPosition) AssignCourse(ctx context.Context, positionID, courseID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCourse", ctx, positionID, courseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignCourse indicates an expected call of AssignCourse.
func (mr *MockRepositoryPositionMockRecorder) AssignCourse(ctx, positionID, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCourse", reflect.TypeOf((*MockRepositoryPosition)(nil).AssignCourse), ctx, positionID, courseID)
}

// AssignCourses mocks base method.
func (m *MockRepositoryPosition) AssignCourses(ctx context.Context, positionID int, courseIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCourses", ctx, positionID, courseIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignCourses indicates an expected call of AssignCourses.
func (mr *MockRepositoryPositionMockRecorder) AssignCourses(ctx, positionID, courseIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCourses", reflect.TypeOf((*MockRepositoryPosition)(nil).AssignCourses), ctx, positionID, courseIDs)
}

// CreatePosition mocks base method.
func (m *MockRepositoryPosition) CreatePosition(ctx context.Context, position model.PositionSet) (*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosition", ctx, position)
	ret0, _ := ret[0].(*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosition indicates an expected call of CreatePosition.
func (mr *MockRepositoryPositionMockRecorder) CreatePosition(ctx, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosition", reflect.TypeOf((*MockRepositoryPosition)(nil).CreatePosition), ctx, position)
}

// GetCourseForPosition mocks base method.
func (m *MockRepositoryPosition) GetCourseForPosition(ctx context.Context, positionID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseForPosition", ctx, positionID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseForPosition indicates an expected call of GetCourseForPosition.
func (mr *MockRepositoryPositionMockRecorder) GetCourseForPosition(ctx, positionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseForPosition", reflect.TypeOf((*MockRepositoryPosition)(nil).GetCourseForPosition), ctx, positionID)
}

// GetPositionByID mocks base method.
func (m *MockRepositoryPosition) GetPositionByID(ctx context.Context, positionID int) (*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionByID", ctx, positionID)
	ret0, _ := ret[0].(*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionByID indicates an expected call of GetPositionByID.
func (mr *MockRepositoryPositionMockRecorder) GetPositionByID(ctx, positionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionByID", reflect.TypeOf((*MockRepositoryPosition)(nil).GetPositionByID), ctx, positionID)
}

// GetPositionInCompany mocks base method.
func (m *MockRepositoryPosition) GetPositionInCompany(ctx context.Context, companyID, positionID int) (*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionInCompany", ctx, companyID, positionID)
	ret0, _ := ret[0].(*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionInCompany indicates an expected call of GetPositionInCompany.
func (mr *MockRepositoryPositionMockRecorder) GetPositionInCompany(ctx, companyID, positionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionInCompany", reflect.TypeOf((*MockRepositoryPosition)(nil).GetPositionInCompany), ctx, companyID, positionID)
}

// ListPositions mocks base method.
func (m *MockRepositoryPosition) ListPositions(ctx context.Context, companyID int) ([]*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositions", ctx, companyID)
	ret0, _ := ret[0].([]*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositions indicates an expected call of ListPositions.
func (mr *MockRepositoryPositionMockRecorder) ListPositions(ctx, companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositions", reflect.TypeOf((*MockRepositoryPosition)(nil).ListPositions), ctx, companyID)
}

// UpdatePosition mocks base method.
func (m *MockRepositoryPosition) UpdatePosition(ctx context.Context, positionID int, position model.PositionSet) (*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePosition", ctx, positionID, position)
	ret0, _ := ret[0].(*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePosition indicates an expected call of UpdatePosition.
func (mr *MockRepositoryPositionMockRecorder) UpdatePosition(ctx, positionID, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePosition", reflect.TypeOf((*MockRepositoryPosition)(nil).UpdatePosition), ctx, positionID, position)
}
