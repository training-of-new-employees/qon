// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/lesson_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/lesson_repo.go -destination=mocks/store/lesson_repo.go
//
// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	model "github.com/training-of-new-employees/qon/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryLesson is a mock of RepositoryLesson interface.
type MockRepositoryLesson struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryLessonMockRecorder
}

// MockRepositoryLessonMockRecorder is the mock recorder for MockRepositoryLesson.
type MockRepositoryLessonMockRecorder struct {
	mock *MockRepositoryLesson
}

// NewMockRepositoryLesson creates a new mock instance.
func NewMockRepositoryLesson(ctrl *gomock.Controller) *MockRepositoryLesson {
	mock := &MockRepositoryLesson{ctrl: ctrl}
	mock.recorder = &MockRepositoryLessonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryLesson) EXPECT() *MockRepositoryLessonMockRecorder {
	return m.recorder
}

// CreateLessonDB mocks base method.
func (m *MockRepositoryLesson) CreateLessonDB(ctx context.Context, lesson model.LessonCreate, user_id int) (*model.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLessonDB", ctx, lesson, user_id)
	ret0, _ := ret[0].(*model.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLessonDB indicates an expected call of CreateLessonDB.
func (mr *MockRepositoryLessonMockRecorder) CreateLessonDB(ctx, lesson, user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLessonDB", reflect.TypeOf((*MockRepositoryLesson)(nil).CreateLessonDB), ctx, lesson, user_id)
}

// DeleteLessonDB mocks base method.
func (m *MockRepositoryLesson) DeleteLessonDB(ctx context.Context, lessonID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLessonDB", ctx, lessonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLessonDB indicates an expected call of DeleteLessonDB.
func (mr *MockRepositoryLessonMockRecorder) DeleteLessonDB(ctx, lessonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLessonDB", reflect.TypeOf((*MockRepositoryLesson)(nil).DeleteLessonDB), ctx, lessonID)
}

// GetLessonDB mocks base method.
func (m *MockRepositoryLesson) GetLessonDB(ctx context.Context, lessonID int) (*model.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonDB", ctx, lessonID)
	ret0, _ := ret[0].(*model.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonDB indicates an expected call of GetLessonDB.
func (mr *MockRepositoryLessonMockRecorder) GetLessonDB(ctx, lessonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonDB", reflect.TypeOf((*MockRepositoryLesson)(nil).GetLessonDB), ctx, lessonID)
}

// UpdateLessonDB mocks base method.
func (m *MockRepositoryLesson) UpdateLessonDB(ctx context.Context, lesson model.LessonUpdate) (*model.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLessonDB", ctx, lesson)
	ret0, _ := ret[0].(*model.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLessonDB indicates an expected call of UpdateLessonDB.
func (mr *MockRepositoryLessonMockRecorder) UpdateLessonDB(ctx, lesson any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLessonDB", reflect.TypeOf((*MockRepositoryLesson)(nil).UpdateLessonDB), ctx, lesson)
}
